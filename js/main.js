const errorMessageBox = `<img src="images/error-vector.png">`;
let spinner = `
  <?xml version="1.0" encoding="utf-8"?>
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
    <g transform="translate(80,50)">
    <g transform="rotate(0)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="1">
      <animateTransform attributeName="transform" type="scale" begin="-0.875s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.875s"></animate>
    </circle>
    </g>
    </g><g transform="translate(71.21320343559643,71.21320343559643)">
    <g transform="rotate(45)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="0.875">
      <animateTransform attributeName="transform" type="scale" begin="-0.75s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.75s"></animate>
    </circle>
    </g>
    </g><g transform="translate(50,80)">
    <g transform="rotate(90)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="0.75">
      <animateTransform attributeName="transform" type="scale" begin="-0.625s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.625s"></animate>
    </circle>
    </g>
    </g><g transform="translate(28.786796564403577,71.21320343559643)">
    <g transform="rotate(135)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="0.625">
      <animateTransform attributeName="transform" type="scale" begin="-0.5s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.5s"></animate>
    </circle>
    </g>
    </g><g transform="translate(20,50.00000000000001)">
    <g transform="rotate(180)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="0.5">
      <animateTransform attributeName="transform" type="scale" begin="-0.375s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.375s"></animate>
    </circle>
    </g>
    </g><g transform="translate(28.78679656440357,28.786796564403577)">
    <g transform="rotate(225)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="0.375">
      <animateTransform attributeName="transform" type="scale" begin="-0.25s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.25s"></animate>
    </circle>
    </g>
    </g><g transform="translate(49.99999999999999,20)">
    <g transform="rotate(270)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="0.25">
      <animateTransform attributeName="transform" type="scale" begin="-0.125s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.125s"></animate>
    </circle>
    </g>
    </g><g transform="translate(71.21320343559643,28.78679656440357)">
    <g transform="rotate(315)">
    <circle cx="0" cy="0" r="6" fill="#4343c3" fill-opacity="0.125">
      <animateTransform attributeName="transform" type="scale" begin="0s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="0s"></animate>
    </circle>
    </g>
    </g>
    <!-- [ldio] generated by https://loading.io/ --></svg>
  `;

const disneyland = Vue.createApp({
    created() {
        // Set fetching state to true initially
        this.isFetching = true;

        fetch('http://localhost:8888/disneyland-api/public/characters')
        .then(res => res.json())
        .then(data => {
            console.log(data);
            this.charactersData = data;
        })
        .catch(error => {
            mainBox.innerHTML = errorMessageBox;
            console.log(error);
        })
        .finally(() => {
            // Set fetching state to false when request completes
            this.isFetching = false;
        });
        
    },
    data() {
        return {
            charactersData: [],
            characterName: "",
            characterId: null,
            description: "",
            error: false,
            name: "",
            films: "", 
            videoGames: "",
            parkAttractions: "",
            isFetching: false, // Add fetching state
        }
    },

    methods: {
        getCharacter(whichCharacter) {
            console.log(whichCharacter.id);
            let name = whichCharacter.id;
            this.isFetching = true; // Set fetching state to true before making request
            fetch(`https://api.disneyapi.dev/character/${name}`)
            .then(res => res.json())
                .then(data => {
                    console.log(data);

                    if (data) {
                    this.error = false;
                    this.name = data.data.name.length > 0 ? data.data.name : ['Not'];  
                    this.films = data.data.films.length > 0 ? data.data.films : ['Not'];
                    this.videoGames = data.data.videoGames.length > 0 ? data.data.videoGames : ['Not available'];
                    this.parkAttractions = data.data.parkAttractions.length > 0 ? data.data.parkAttractions : ['Not available'];
                
                    } else {
                        this.error = 'There is no information for this character. Please try again later.';
                    }
                })
                .catch(error => {
                    mainBox.innerHTML = errorMessageBox;
                    console.error(error);
                    this.error = 'Oops! It looks like the data magic did not work this time. Please try again later to uncover more about this enchanting character.';
                })
                .finally(() => {
                    this.isFetching = false; // Set fetching state to false when request completes
                });
        }
    }
});

disneyland.mount("#app");



//Burger menu

(function(){

	let button = document.querySelector("#button");
	let burgerCon = document.querySelector("#burger-con");

	function hamburgerMenu() {
		burgerCon.classList.toggle("slide-toggle");
		button.classList.toggle("expanded");
	};

	button.addEventListener("click", hamburgerMenu, false);		
})();











